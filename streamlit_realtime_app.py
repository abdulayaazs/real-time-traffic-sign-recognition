# -*- coding: utf-8 -*-
"""streamlit_realtime_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QbtiAXuu66DGOZu-YrAMyfi783a0-n4U
"""

# app/streamlit_realtime_app.py

import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
import os

# Load the trained model
model = tf.keras.models.load_model('../models/traffic_sign_model.h5')

# Define class labels (you can modify if needed)
class_labels = [
    'Speed limit (20km/h)', 'Speed limit (30km/h)', 'Speed limit (50km/h)', 'Speed limit (60km/h)',
    'Speed limit (70km/h)', 'Speed limit (80km/h)', 'End of speed limit (80km/h)', 'Speed limit (100km/h)',
    'Speed limit (120km/h)', 'No passing', 'No passing for vehicles over 3.5 metric tons',
    'Right-of-way at the next intersection', 'Priority road', 'Yield', 'Stop',
    'No vehicles', 'Vehicles over 3.5 metric tons prohibited', 'No entry', 'General caution',
    'Dangerous curve to the left', 'Dangerous curve to the right', 'Double curve', 'Bumpy road',
    'Slippery road', 'Road narrows on the right', 'Road work', 'Traffic signals', 'Pedestrians',
    'Children crossing', 'Bicycles crossing', 'Beware of ice/snow', 'Wild animals crossing',
    'End of all speed and passing limits', 'Turn right ahead', 'Turn left ahead', 'Ahead only',
    'Go straight or right', 'Go straight or left', 'Keep right', 'Keep left', 'Roundabout mandatory',
    'End of no passing', 'End of no passing by vehicles over 3.5 metric tons'
]

def predict_image(image):
    img = image.resize((32, 32))
    img_array = np.array(img)
    img_array = img_array / 255.0
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

    predictions = model.predict(img_array)
    predicted_class = np.argmax(predictions, axis=1)[0]
    confidence = np.max(predictions)

    return class_labels[predicted_class], confidence

# Streamlit interface
st.title("Real-Time Traffic Sign Recognition")
st.markdown("Upload a traffic sign image to predict its class.")

uploaded_file = st.file_uploader("Choose an image file", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image', use_column_width=True)

    if st.button('Predict'):
        label, confidence = predict_image(image)
        st.success(f"Prediction: {label}")
        st.info(f"Confidence: {confidence*100:.2f}%")

# Footer
st.caption("Model trained on GTSRB dataset. Predictions are for educational purposes only.")